# The code for getting the right files lives in this library, so import it
# using sys.path hackery
# Unfortunately this means it must be run from the git root dir, but that's
# probably what you're doing anyway
import sys

sys.path.append("k3pi-data")

from lib_data import definitions

# Options - TODO will do this nicer
year, magnetisation = "2018", "magdown"

# Number of data files to use for real data, upper mass
# since this is by far the slowest step
n_files = 8

# Number of parallel processes for creating data dumps
n_procs = 2

# Other things
# ----
# Track whether we've set up the python environment
# Hacky but works
# Will break if a conda environment with this name already exists
conda_flag = "workflow/envs/conda_created"


# Input files
# ----
real_data_files = definitions.data_files(year, magnetisation)[:n_files]

dcs_ampgen_input = "ws_D02piKpipi.root"
cf_ampgen_input = "rs_Dbar02piKpipi.root"


# Output files
# ----
dcs_data_dumps = [
    definitions.data_dump(data_file, year, "dcs", magnetisation)
    for data_file in real_data_files
]
cf_data_dumps = [
    definitions.data_dump(data_file, year, "cf", magnetisation)
    for data_file in real_data_files
]

# Uppermass dumps
# Only need DCS - this is all we use to train the BDT cut classifier
dcs_uppermass_dumps = [
    definitions.uppermass_dump(data_file, year, "dcs", "magdown")
    for data_file in real_data_files
]

# MC dumps
dcs_mc_dump, cf_mc_dump = (
    definitions.mc_dump(year, sign, magnetisation) for sign in ("dcs", "cf")
)

# Particle gun analyis productions
dcs_pgun_files = definitions.pgun_filepaths("dcs")
cf_pgun_files = definitions.pgun_filepaths("cf")

# Particle gun dumps
dcs_pgun_dumps = [definitions.pgun_dump_fromfile(path, "dcs") for path in dcs_pgun_files]
cf_pgun_dumps = [definitions.pgun_dump_fromfile(path, "cf") for path in cf_pgun_files]

# AmpGen dumps
dcs_ampgen_dump = definitions.ampgen_dump("dcs")
cf_ampgen_dump = definitions.ampgen_dump("cf")

# Classifier for BDT cut
# TODO get programatically
bdt_clf = "k3pi_signal_cuts/classifiers/2018_dcs_magdown.pkl"

# Efficiency reweighters
# TODO get programatically
cf_eff_weighter = "k3pi_efficiency/reweighter/2018_cf_magdown_both.pkl"
dcs_eff_weighter = "k3pi_efficiency/reweighter/2018_dcs_magdown_both.pkl"

analysis_plots = (
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_0_alt_bkg=False.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_1_alt_bkg=False.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_2_alt_bkg=False.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_3_alt_bkg=False.png",
    # Charm fits to data with efficiency
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_0_alt_bkg=False.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_1_alt_bkg=False.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_2_alt_bkg=False.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_3_alt_bkg=False.png",
    # Alt bkg fits to data
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_0_alt_bkg=True.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_1_alt_bkg=True.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_2_alt_bkg=True.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_3_alt_bkg=True.png",
    # Alt bkg fits to data with efficiency
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_0_alt_bkg=True.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_1_alt_bkg=True.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_2_alt_bkg=True.png",
    f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_3_alt_bkg=True.png",
)

validation_plots = (
    # Data validation
    "data_param_rs.png",
    "data_param_ws.png",
    # BDT cut validation + plots
    "significance_threshholds.png",
    "roc.png",
    # Show the BDT cut on data
    "data_threshholds.png",
    "dcs_data_cuts.png",
    # Efficiency validation
    f"proj_{year}_{magnetisation}_data_dcs_both_weighter_dcs_both.png",
    f"proj_{year}_{magnetisation}_data_cf_both_weighter_cf_both.png",
    f"ratio_{year}_{magnetisation}_data_both_weighter_both.png",
    f"z_{year}_{magnetisation}_data_dcs_both_weighter_dcs_both.png",
    f"z_{year}_{magnetisation}_data_cf_both_weighter_cf_both.png",
    # Show the efficiency correction on data
    # TODO
    # Toy mass fit
    "toy_mass_fit_alt_bkg=False.png",
    "toy_mass_fit_alt_bkg=True.png",
    # Mass fit on data
    # Charm fit toys
    "unconstrained_example.png",
    "toy_scan.png",
    "toy_coverage.png",
)


rule run_all:
    input:
        "analysis_done",
        "validation_done",


rule k3pi_analysis:
    input:
        analysis_plots,
    output:
        "analysis_done"


rule validation:
    input:
        validation_plots,
    output:
        "validation_done"


# Set up the python environment
rule create_python:
    output:
        # Special file that flags whether the conda environment
        # has been created by this script
        # ugly and hacky but might work
        conda_flag,
    log:
        "logs/setup_python.log",
    run:
        shell("conda create --name d2k3py python=3.10 --yes >> {{log}} 2>&1")
        shell("conda activate d2k3py >> {{log}} 2>&1")
        shell("pip install -r requirements.txt >> {{log}} 2>&1")
        shell(f"touch {conda_flag} >> {{log}} 2>&1")


# Create dataframes - AmpGen, pGun, MC, data
rule create_ampgen:
    input:
        ancient(conda_flag),
    output:
        dcs_ampgen_dump,
        cf_ampgen_dump,
    log:
        "logs/create_ampgen.log",
    conda:
        "workflow/envs/d2k3py"
    shell:
        "python k3pi-data/create_ampgen.py ../ws_D02piKpipi.root dcs >> {{log}} 2>&1"
        "&& python k3pi-data/create_ampgen.py ../rs_Dbar02piKpipi.root cf >> {{log}} 2>&1"


rule create_dcs_pgun:
    # TODO have an input directive pointing at the analysis productions
    input:
        ancient(conda_flag),
    output:
        *dcs_pgun_dumps,
    log:
        "logs/create_dcs_pgun.log",
    conda:
        "d2k3py"
    shell:
        "python k3pi-data/create_pgun.py dcs >> {{log}} 2>&1"


rule create_cf_pgun:
    # TODO have an input directive pointing at the analysis productions
    input:
        ancient(conda_flag),
    output:
        *cf_pgun_dumps,
    conda:
        "d2k3py"
    log:
        "logs/create_cf_pgun.log",
    shell:
        f"python k3pi-data/create_pgun.py cf >> {{log}} 2>&1"


rule create_cf_mc:
    # TODO have an input directive pointing at the analysis productions
    input:
        ancient(conda_flag),
    output:
        cf_mc_dump,
    conda:
        "d2k3py"
    log:
        "logs/create_cf_mc.log",
    shell:
        f"python k3pi-data/create_mc.py {year} cf {magnetisation} >> {{log}} 2>&1"


rule create_dcs_mc:
    # TODO have an input directive pointing at the analysis productions
    input:
        ancient(conda_flag),
    output:
        dcs_mc_dump,
    conda:
        "d2k3py"
    log:
        "logs/create_dcs_mc.log",
    shell:
        f"python k3pi-data/create_mc.py {year} dcs {magnetisation} >> {{log}} 2>&1"


rule create_uppermass:
    input:
        ancient(conda_flag),
        real_data_files,
    output:
        dcs_uppermass_dumps,
    threads: n_procs
    conda:
        "d2k3py"
    log:
        "logs/create_uppermass.log",
    shell:
        f"python k3pi-data/create_uppermass.py {year} dcs {magnetisation} -n {n_files} >> {{log}} 2>&1"


rule create_dcs_real:
    input:
        ancient(conda_flag),
        real_data_files,
    output:
        dcs_data_dumps,
    threads: n_procs
    conda:
        "d2k3py"
    log:
        "logs/create_dcs_real.log",
    shell:
        f"python k3pi-data/create_real.py {year} dcs {magnetisation} -n {n_files} --n_procs {n_procs} >> {{log}} 2>&1"


rule create_cf_real:
    input:
        ancient(conda_flag),
        real_data_files,
    output:
        cf_data_dumps,
    threads: n_procs
    conda:
        "d2k3py"
    log:
        "logs/create_dcs_real.log",
    shell:
        f"python k3pi-data/create_real.py {year} cf {magnetisation} -n {n_files} --n_procs {n_procs} >> {{log}} 2>&1"


# Do MC corrections - TODO, decide what this is


# Train the classifier for the BDT cut
rule train_bdt:
    input:
        dcs_uppermass_dumps,
        dcs_mc_dump,
    output:
        bdt_clf,
    conda:
        "d2k3py"
    log:
        "logs/train_bdt.log",
    shell:
        f"python k3pi_signal_cuts/create_classifier.py {year} dcs {magnetisation} >> {{log}} 2>&1"


# Train the efficiency reweighters
rule train_cf_efficiency:
    input:
        *cf_pgun_dumps,
        cf_ampgen_dump,
    output:
        cf_eff_weighter,
    conda:
        "d2k3py"
    log:
        "logs/train_cf_efficiency.log",
    shell:
        f"python k3pi_efficiency/create_reweighter.py cf {year} {magnetisation} both >> {{log}} 2>&1"


rule train_dcs_efficiency:
    input:
        *dcs_pgun_dumps,
        dcs_ampgen_dump,
    conda:
        "d2k3py"
    log:
        "logs/train_dcs_efficiency.log",
    output:
        # TODO year/magnetisation are currently unused
        f"k3pi_efficiency/reweighter/{year}_dcs_{magnetisation}_both.pkl",
    shell:
        f"python k3pi_efficiency/create_reweighter.py dcs {year} {magnetisation} both >> {{log}} 2>&1"


# Create validation plots for the data
rule validation_data:
    input:
        cf_ampgen_dump,
        dcs_ampgen_dump,
        dcs_pgun_dumps,
        cf_pgun_dumps,
        cf_mc_dump,
        dcs_mc_dump,
        dcs_uppermass_dumps,
        # *cf_uppermass_dumps,  # TODO define
        cf_data_dumps,
        dcs_data_dumps,
    output:
        "data_param_rs.png",
        "data_param_ws.png",
    conda:
        "d2k3py"
    log:
        "logs/validation_data.log",
    shell:
        "python k3pi-data/scripts/plot_parameterisation.py >> {{log}} 2>&1"


# Create validation plots for the BDT cut
rule validation_bdt_cut:
    input:
        f"k3pi_signal_cuts/classifiers/{year}_dcs_{magnetisation}.pkl",
        dcs_uppermass_dumps,
        dcs_mc_dump,
    output:
        "significance_threshholds.png",
        "roc.png",
    conda:
        "d2k3py"
    log:
        "logs/validation_bdt_cut.log",
    shell:
        "python k3pi_signal_cuts/scripts/plot_signal_significance.py >> {{log}} 2>&1"
        "&& python k3pi_signal_cuts/scripts/plot_roc.py >> {{log}} 2>&1"


rule validation_bdt_cut_data:
    input:
        f"k3pi_signal_cuts/classifiers/{year}_dcs_{magnetisation}.pkl",
        dcs_data_dumps,
        cf_data_dumps,
    output:
        "data_threshholds.png",
        "dcs_data_cuts.png",
    conda:
        "d2k3py"
    log:
        "logs/bdt_cut_data.log",
    shell:
        "python k3pi_signal_cuts/scripts/plot_data_threshholds.py >> {{log}} 2>&1"
        "&& python k3pi_signal_cuts/scripts/plot_data_cuts.py >> {{log}} 2>&1"
        "&& python k3pi_signal_cuts/scripts/plot_signal_significance.py >> {{log}} 2>&1"
        "&& python k3pi_signal_cuts/scripts/plot_roc.py >> {{log}} 2>&1"


# Create validation plots for the efficiency
rule validation_efficiency:
    input:
        dcs_eff_weighter,
        cf_eff_weighter,
        dcs_pgun_dumps,
        cf_pgun_dumps,
        cf_ampgen_dump,
        dcs_ampgen_dump,
    output:
        f"proj_{year}_{magnetisation}_data_dcs_both_weighter_dcs_both.png",
        f"proj_{year}_{magnetisation}_data_cf_both_weighter_cf_both.png",
        f"ratio_{year}_{magnetisation}_data_both_weighter_both.png",
        f"z_{year}_{magnetisation}_data_dcs_both_weighter_dcs_both.png",
        f"z_{year}_{magnetisation}_data_cf_both_weighter_cf_both.png",
    conda:
        "d2k3py"
    log:
        "logs/validation_efficiency.log",
    shell:
        f"python k3pi_efficiency/scripts/plot_projection.py {year} dcs dcs {magnetisation} both both >> {{log}} 2>&1"
        f"&& python k3pi_efficiency/scripts/plot_projection.py {year} cf cf {magnetisation} both both >> {{log}} 2>&1"
        f"&& python k3pi_efficiency/scripts/plot_time_ratio.py {year} {magnetisation} both both >> {{log}} 2>&1"
        f"&& python k3pi_efficiency/scripts/plot_z_scatter.py {year} dcs dcs {magnetisation} both both >> {{log}} 2>&1"
        f"&& python k3pi_efficiency/scripts/plot_z_scatter.py {year} cf cf {magnetisation} both both >> {{log}} 2>&1"


# Mass fit toy plots
rule massfit_toys:
    input:
        ancient(conda_flag),
    output:
        "toy_mass_fit_alt_bkg=False.png",
        "toy_mass_fit_alt_bkg=True.png",
    conda:
        "d2k3py"
    log:
        "logs/massfit_toys.log",
    shell:
        "python k3pi_mass_fit/scripts/toys/toy_fit.py >> {{log}} 2>&1"
        "&& python k3pi_mass_fit/scripts/toys/toy_fit.py --alt_bkg >> {{log}} 2>&1"


# Toy plots for the time fitter
rule charmfit_toys:
    input:
        ancient(conda_flag),
    output:
        "unconstrained_example.png",
        "toy_scan.png",
        "toy_coverage.png",
    conda:
        "d2k3py"
    log:
        "logs/charmfit_toys.log",
    shell:
        "python k3pi_fitter/scripts/scan_example.py >> {{log}} 2>&1"
        "&& python k3pi_fitter/scripts/pulls/scan_coverage.py >> {{log}} 2>&1"


# BDT cut on real data
# Efficiency correction plot on real data
# Mass fit time binned real data - output yields + errors to file
rule massfit_data_no_eff:
    output:
        # Also outputs yield images
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_0_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_1_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_2_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_3_bdt_cut=True_efficiency=False.txt",
    input:
        bdt_clf,
        cf_data_dumps,
        dcs_data_dumps,
    conda:
        "d2k3py"
    log:
        "logs/massfit_data_noeff.log",
    shell:
        f"python k3pi_mass_fit/scripts/get_yields.py {year} {magnetisation} 0 --bdt_cut"
        f"&& python k3pi_mass_fit/scripts/get_yields.py {year} {magnetisation} 1 --bdt_cut"
        f"&& python k3pi_mass_fit/scripts/get_yields.py {year} {magnetisation} 2 --bdt_cut"
        f"&& python k3pi_mass_fit/scripts/get_yields.py {year} {magnetisation} 3 --bdt_cut"


rule massfit_data:
    output:
        # Also outputs yield images
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_0_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_1_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_2_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_3_bdt_cut=True_efficiency=True.txt",
    input:
        bdt_clf,
        dcs_data_dumps,
        cf_data_dumps,
        dcs_eff_weighter,
        cf_eff_weighter,
    conda:
        "d2k3py"
    log:
        "logs/massfit_data.log",
    shell:
        f"python k3pi_mass_fit/scripts/get_yields.py {year} {magnetisation} 0 --bdt_cut --efficiency"
        f"&& python k3pi_mass_fit/scripts/get_yields.py {year} {magnetisation} 1 --bdt_cut --efficiency"
        f"&& python k3pi_mass_fit/scripts/get_yields.py {year} {magnetisation} 2 --bdt_cut --efficiency"
        f"&& python k3pi_mass_fit/scripts/get_yields.py {year} {magnetisation} 3 --bdt_cut --efficiency"


rule massfit_data_no_eff_altbkg:
    output:
        # Also outputs yield images
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_0_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_1_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_2_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_3_bdt_cut=True_efficiency=False.txt",
    input:
        bdt_clf,
        dcs_data_dumps,
        cf_data_dumps,
    conda:
        "d2k3py"
    log:
        "logs/alt_massfit_data_noeff.log",
    shell:
        f"python k3pi_mass_fit/scripts/get_yields_altbkg.py {year} {magnetisation} 0 --bdt_cut"
        f"&& python k3pi_mass_fit/scripts/get_yields_altbkg.py {year} {magnetisation} 1 --bdt_cut"
        f"&& python k3pi_mass_fit/scripts/get_yields_altbkg.py {year} {magnetisation} 2 --bdt_cut"
        f"&& python k3pi_mass_fit/scripts/get_yields_altbkg.py {year} {magnetisation} 3 --bdt_cut"


rule massfit_data_altbkg:
    output:
        # Also outputs yield images
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_0_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_1_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_2_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_3_bdt_cut=True_efficiency=True.txt",
    input:
        bdt_clf,
        dcs_data_dumps,
        cf_data_dumps,
    conda:
        "d2k3py"
    log:
        "logs/massfit_data_altbkg.log",
    shell:
        f"python k3pi_mass_fit/scripts/get_yields_altbkg.py {year} {magnetisation} 0 --bdt_cut --efficiency"
        f"&& python k3pi_mass_fit/scripts/get_yields_altbkg.py {year} {magnetisation} 1 --bdt_cut --efficiency"
        f"&& python k3pi_mass_fit/scripts/get_yields_altbkg.py {year} {magnetisation} 2 --bdt_cut --efficiency"
        f"&& python k3pi_mass_fit/scripts/get_yields_altbkg.py {year} {magnetisation} 3 --bdt_cut --efficiency"


# Time fit yields
rule timefit_data_no_eff:
    input:
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_0_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_1_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_2_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_3_bdt_cut=True_efficiency=False.txt",
    output:
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_0_alt_bkg=False.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_1_alt_bkg=False.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_2_alt_bkg=False.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_3_alt_bkg=False.png",
    conda:
        "d2k3py"
    log:
        "logs/timefit_data.log",
    shell:
        f"python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 0 --bdt_cut >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 1 --bdt_cut >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 2 --bdt_cut >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 3 --bdt_cut >> {{log}} 2>&1"


rule timefit_data:
    input:
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_0_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_1_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_2_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/yields_{year}_{magnetisation}_3_bdt_cut=True_efficiency=True.txt",
    output:
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_0_alt_bkg=False.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_1_alt_bkg=False.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_2_alt_bkg=False.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_3_alt_bkg=False.png",
    conda:
        "d2k3py"
    log:
        "logs/timefit_data_eff.log",
    shell:
        f"python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 0 --bdt_cut --efficiency >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 1 --bdt_cut --efficiency >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 2 --bdt_cut --efficiency >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 3 --bdt_cut --efficiency >> {{log}} 2>&1"


rule timefit_data_no_eff_altbkg:
    input:
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_0_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_1_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_2_bdt_cut=True_efficiency=False.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_3_bdt_cut=True_efficiency=False.txt",
    output:
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_0_alt_bkg=True.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_1_alt_bkg=True.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_2_alt_bkg=True.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=False_3_alt_bkg=True.png",
    conda:
        "d2k3py"
    log:
        "logs/timefit_data_no_eff_altbkg.log",
    shell:
        f"python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 0 --bdt_cut --alt_bkg >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 1 --bdt_cut --alt_bkg >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 2 --bdt_cut --alt_bkg >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 3 --bdt_cut --alt_bkg >> {{log}} 2>&1"


rule timefit_data_altbkg:
    input:
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_0_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_1_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_2_bdt_cut=True_efficiency=True.txt",
        f"k3pi_mass_fit/alt_yields_{year}_{magnetisation}_3_bdt_cut=True_efficiency=True.txt",
    output:
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_0_alt_bkg=True.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_1_alt_bkg=True.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_2_alt_bkg=True.png",
        f"fits_{year}_{magnetisation}_bdt_cut=True_efficiency=True_3_alt_bkg=True.png",
    conda:
        "d2k3py"
    log:
        "logs/timefit_data_eff.log",
    shell:
        f"python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 0 --bdt_cut --efficiency --alt_bkg >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 1 --bdt_cut --efficiency --alt_bkg >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 2 --bdt_cut --efficiency --alt_bkg >> {{log}} 2>&1"
        f"&& python k3pi_fitter/scripts/fit_from_file.py {year} {magnetisation} 3 --bdt_cut --efficiency --alt_bkg >> {{log}} 2>&1"


# Scan yields w/ charm constraint
